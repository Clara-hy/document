难度简单：[原题链接](https://leetcode-cn.com/problems/linked-list-cycle/)
# 题目
给你一个链表的头节点 head ，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 `next` 指针再次到达，则链表中存在环。
为了表示给定链表中的环，评测系统内部使用整数 `pos` 来表示链表尾连接到链表中的位置（索引从 0 开始）。
**注意：pos 不作为参数进行传递 。** 仅仅是为了标识链表的实际情况。

如果链表中存在环 ，则返回 `true` 。 否则，返回 `false` 。

# 示例
![example](./image/0320-141-示例.jpg)

# 解法一 Set
```js
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */

var hasCycle = function(head) {
    let set = new Set();
    let res = false;

    while(head) {
        if(!set.has(head)) {
            set.add(head);
            head = head.next
        } else {
            res = true;
            break;
        }
    }
    return res;
}
```
# 解法二 快慢针
很多题解都提到这个。说慢针一步一个，快针一步两个。如果没有环，慢针和快针一定不可能相遇。
但如果有环，慢针和快针一定会相遇。就好比跑步比赛，快的人如果跟慢的人相遇，快的人一定比慢的人多出一圈，
只是跑了几圈才多出一圈。

如果快的人是慢的人的2倍，那慢的人跑半圈，快的人已经跑了一圈了。
```js
var hasCycle = function(head) {
    let slow = head;
    if(!slow) {
        return false;
    }
    let fast = head.next;
    if(!fast) {
        return false;
    }
    while(slow && fast) {
        if(slow === fast) {
            return true;
        }
        slow = slow.next;
        fast = fast.next ? fast.next.next : fast.next;
    }
    return false;
}
```
